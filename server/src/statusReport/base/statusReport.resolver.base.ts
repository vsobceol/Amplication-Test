/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateStatusReportArgs } from "./CreateStatusReportArgs";
import { UpdateStatusReportArgs } from "./UpdateStatusReportArgs";
import { DeleteStatusReportArgs } from "./DeleteStatusReportArgs";
import { StatusReportFindManyArgs } from "./StatusReportFindManyArgs";
import { StatusReportFindUniqueArgs } from "./StatusReportFindUniqueArgs";
import { StatusReport } from "./StatusReport";
import { StatusReportService } from "../statusReport.service";
@graphql.Resolver(() => StatusReport)
export class StatusReportResolverBase {
  constructor(protected readonly service: StatusReportService) {}

  async _statusReportsMeta(
    @graphql.Args() args: StatusReportFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [StatusReport])
  async statusReports(
    @graphql.Args() args: StatusReportFindManyArgs
  ): Promise<StatusReport[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => StatusReport, { nullable: true })
  async statusReport(
    @graphql.Args() args: StatusReportFindUniqueArgs
  ): Promise<StatusReport | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StatusReport)
  async createStatusReport(
    @graphql.Args() args: CreateStatusReportArgs
  ): Promise<StatusReport> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => StatusReport)
  async updateStatusReport(
    @graphql.Args() args: UpdateStatusReportArgs
  ): Promise<StatusReport | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StatusReport)
  async deleteStatusReport(
    @graphql.Args() args: DeleteStatusReportArgs
  ): Promise<StatusReport | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
